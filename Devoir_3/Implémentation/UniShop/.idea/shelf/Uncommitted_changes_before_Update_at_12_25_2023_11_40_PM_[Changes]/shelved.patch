Index: src/main/java/unishop/ControleurAcheteur.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unishop;\r\n\r\nimport unishop.Categories.Categorie;\r\nimport unishop.Users.Acheteur;\r\nimport unishop.Users.Revendeur;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport static unishop.Main.*;\r\n\r\npublic class ControleurAcheteur {\r\n    private static short choix;\r\n    private static Acheteur acheteur;\r\n    static void menuAcheteur(Acheteur a)  {\r\n        acheteur = a;\r\n        while (true) {\r\n            System.out.println(\"\\nVoici le menu Acheteur:\");\r\n            choix = selectionChoix(new String[]{\"Accéder aux commandes\", \"Accéder au panier d'achat\", \"Voir les billets\",\r\n                    \"Changer les informations du profil\", \"Rechercher un produit\",\r\n                    \"Rechercher un revendeur\", \"Gérer les acheteur suivis\",\r\n                    \"Afficher les métriques\", \"Voir les notifications\", \"Se déconnecter\"});\r\n            switch (choix) {\r\n                case 1 -> gererCommandes();\r\n                case 2 -> allerAuPanier();\r\n                case 3 -> gererBillets();\r\n                case 4 -> changerInformations();\r\n                case 5 -> {\r\n                    short c = rechercherProduits();\r\n                    while (c == 1)\r\n                        c = rechercherProduits();\r\n                    if (c == 2)\r\n                        allerAuPanier();\r\n                }\r\n                case 6 -> rechercherRevendeur();\r\n                case 7 -> gererAcheteursSuivis();\r\n                case 8 -> System.out.println(acheteur.afficherMetriques());\r\n                case 9 -> System.out.println(\"\\n\" + acheteur.voirNotifications());\r\n                case 10 -> {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static short rechercherProduits() {\r\n        System.out.println(\"\\nQuel type de recherche voulez-vous faire?\");\r\n        try {\r\n            ArrayList<String> pSelect = new ArrayList<>();\r\n            List<String> produits = fichiersDansDossier(PRODUITS_PATH);\r\n            boolean estRecherche = 1 == selectionChoix(new String[] {\"Recherche par mots-clés\",\r\n                    \"Recherche par filtre\"});\r\n            String recherche = \"\";\r\n            short choixCat = 0;\r\n            boolean estPrixPlusGrand = false;\r\n            float floatDemande = 0;\r\n            int nbLikesDemande = 0;\r\n            if (estRecherche) {\r\n                System.out.print(\"Entrez votre recherche: \");\r\n                recherche = br.readLine();\r\n            }\r\n            else {\r\n                System.out.println(\"Choisissez votre type de filtre: \");\r\n                choix = selectionChoix(new String[] {\"Catégorie\", \"Prix\", \"Popularité\", \"Note moyenne\",\r\n                        \"Promotion\"});\r\n                switch (choix) {\r\n                    case 1 -> {\r\n                        System.out.println(\"Choisissez une catégorie: \");\r\n                        choixCat = selectionChoix(Categorie.categories);\r\n                        --choixCat;\r\n                    }\r\n                    case 2 -> {\r\n                        System.out.println(\"Filtrer par plus petit ou plus grand?\");\r\n                        estPrixPlusGrand = 1 == selectionChoix(new String[]{\"Plus petit\", \"Plus grand\"});\r\n                        System.out.print(\"Entrez un prix: \");\r\n                        floatDemande = demanderFloat(\"un prix\");\r\n                    }\r\n                    case 3 -> {\r\n                        System.out.print(\"Entrez un nombre minimum de likes: \");\r\n                        nbLikesDemande = demanderIntPositif(\"un nombre de likes\");\r\n                    }\r\n                    case 4 -> {\r\n                        System.out.print(\"Entrez une note moyenne minimale: \");\r\n                        floatDemande = demanderFloat(\"une note\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            for(String p : produits) {\r\n                String[] contenu = lireFichierEnEntier(PRODUITS_PATH + p);\r\n                String[] infos = contenu[0].split(\",\");\r\n                String[] cat = contenu[3].split(\",\");\r\n                String produitPreview = String.join(\", \", infos[1],\r\n                        Categorie.getCat(Integer.parseInt(cat[0])), \"Revendeur: \" + infos[0]);\r\n                if (estRecherche) {\r\n                    if ((infos[1] + infos[2] + cat[1] + cat[2] + cat[3]).contains(recherche))\r\n                        pSelect.add(produitPreview);\r\n                }\r\n                else {\r\n                    switch (choix) {\r\n                        case 1 -> {\r\n                            short pCat = Short.parseShort(cat[0]);\r\n                            if (choixCat == pCat)\r\n                                pSelect.add(produitPreview);\r\n                        }\r\n                        case 2 -> {\r\n                            float prix = Float.parseFloat(infos[3]);\r\n                            if (estPrixPlusGrand) {\r\n                                if (prix <= floatDemande)\r\n                                    pSelect.add(produitPreview);\r\n                            } else {\r\n                                if (prix >= floatDemande)\r\n                                    pSelect.add(produitPreview);\r\n                            }\r\n                        }\r\n                        case 3 -> {\r\n                            String[] nbLikesS = contenu[4].split(\",\");\r\n                            int nbLikes = nbLikesS.length;\r\n                            if (nbLikesS[0].isEmpty())\r\n                                nbLikes = 0;\r\n                            if (nbLikes >= nbLikesDemande)\r\n                                pSelect.add(produitPreview);\r\n                        }\r\n                        case 4 -> {\r\n                            float noteMoyenne = Float.parseFloat(infos[6]);\r\n                            if (noteMoyenne >= floatDemande)\r\n                                pSelect.add(produitPreview);\r\n                        }\r\n                        case 5 -> {\r\n                            if (Integer.parseInt(infos[5]) != 0)\r\n                                pSelect.add(produitPreview);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (pSelect.isEmpty()) {\r\n                System.out.println(\"Aucun résultat pour cette recherche. Veuillez réessayer.\");\r\n                return 1;\r\n            }\r\n            pSelect.add(\"Faire une nouvelle recherche\");\r\n            pSelect.add(\"Retourner au menu acheteur\");\r\n            while (true) {\r\n                System.out.println(\"\\nChoisissez un produit: \");\r\n                choix = selectionChoix(pSelect.toArray());\r\n                if (choix == pSelect.size() - 1)\r\n                    return 1;\r\n                else if (choix == pSelect.size())\r\n                    return 0;\r\n                Produit p = initialiserProduit(pSelect.get(choix - 1).split(\",\")[0]);\r\n                System.out.println(\"\\n\" + p.getFormatDisplay());\r\n                while (true) {\r\n                    System.out.println(\"\\nQue voulez-vous faire ensuite?\");\r\n                    choix = selectionChoix(new String[] {\"Liker le produit\", \"Ajouter le produit au panier\",\r\n                            \"Regarder les évaluations\", \"Écrire une évaluation\", \"Voir les likes\",\r\n                            \"Retourner au résultat de la recherche\" });\r\n                    if (choix == 6)\r\n                        break;\r\n                    switch (choix) {\r\n                        case 1 -> System.out.println(\"\\n\" + p.liker(acheteur.getUsername()));\r\n                        case 2 -> {\r\n                            if (p.getQuantite() == 0) {\r\n                                System.out.println(\"\\nLe produit \" + p.titre + \" doit être restocké.\");\r\n                                continue;\r\n                            }\r\n                            acheteur.panier.addProduit(p);\r\n                            System.out.println(\"\\nVous avez ajouté \" + p.titre + \" au panier!\");\r\n                            System.out.println(\"\\nVoulez-vous aller au panier?\");\r\n                            if (choixOuiNon())\r\n                                return 2;\r\n                        }\r\n                        case 3 -> {\r\n                            if (p.getEvaluations().isEmpty()) {\r\n                                System.out.println(\"\\nCe produit n'a aucune évaluations!\");\r\n                                break;\r\n                            }\r\n                            System.out.println(\"\\nChoississez une évaluation:\");\r\n                            ArrayList<Evaluation> es = p.getEvaluations();\r\n                            ArrayList<String> ess = new ArrayList<>();\r\n                            for (Evaluation e : es)\r\n                                ess.add(e.getDisplayFormat() + \"\\n\");\r\n                            ess.add(\"Retourner au produit\");\r\n                            choix = selectionChoix(ess.toArray());\r\n                            if (choix == ess.size())\r\n                                continue;\r\n                            Evaluation e = es.get(choix - 1);\r\n                            System.out.println(\"\\n\" + e.getDisplayFormat());\r\n                            if (e.nomAcheteur.equals(acheteur.getUsername())) {\r\n                                System.out.println(\"\\nC'est votre propre évaluation!\");\r\n                                continue;\r\n                            }\r\n                            System.out.println(\"\\nQue voulez-vous faire?\");\r\n                            choix = selectionChoix(new String[] {\"Liker l'évaluation\",\r\n                                    \"Signaler l'évaluation comme inappropriée\", \"Retourner au produit\"});\r\n                            if (choix == 3)\r\n                                continue;\r\n                            Acheteur a = initialiserAcheteur(e.nomAcheteur);\r\n                            if (choix == 1) {\r\n                                if (e.getLikes() == 0)\r\n                                    a.ajouterPoints(10);\r\n                                if (e.ajouterLike(acheteur.getUsername())) {\r\n                                    p.save();\r\n                                    System.out.println(\"\\nVous avez liké l'évaluation de \" + a.getUsername() + \"!\");\r\n                                }\r\n                                else\r\n                                    System.out.println(\"\\nVous avez déjà liké cette évaluation!\");\r\n                            }\r\n                            else {\r\n                                if (e.signaler()) {\r\n                                    if (e.getLikes() == 0)\r\n                                        a.ajouterPoints(-10);\r\n                                    e.signaler();\r\n                                    p.save();\r\n                                    System.out.println(\"\\nVous avez signalé cette évaluation!\");\r\n                                }\r\n                                else\r\n                                    System.out.println(\"\\nCette évaluation était déjà signalée!\");\r\n                            }\r\n\r\n                        }\r\n                        case 4 -> {\r\n                            if (acheteur.aAcheteProduit(p.titre)) {\r\n                                ecrireEvaluation(p);\r\n                            }\r\n                            else {\r\n                                System.out.println(\"\\nVous devez acheter ce produit avant de l'évaluer!\");\r\n                            }\r\n                        }\r\n                        case 5 -> {\r\n                            ArrayList<String> ar = p.voirLikes();\r\n                            ar.add(\"Retourner au produit\");\r\n                            String[] as = ar.toArray(new String[0]);\r\n                            if (as.length == 1) {\r\n                                System.out.println(\"\\nCe produit n'a aucun likes.\");\r\n                            }\r\n                            else {\r\n                                System.out.println(\"\\nChoisir un acheteur à suivre: \");\r\n                                short c = selectionChoix(as);\r\n                                if (c == as.length)\r\n                                    continue;\r\n                                System.out.println(\"\\n\" + acheteur.suivre(p.getLike(c - 1)));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Quelque chose s'est mal passé. Veuillez réessayer.\");\r\n            rechercherProduits();\r\n        }\r\n        return 0;\r\n\r\n    }\r\n    static void gererCommandes() {\r\n        ArrayList<Commande> cmds = acheteur.getCommandes();\r\n        if (cmds.isEmpty()) {\r\n            System.out.println(\"\\nVous n'avez aucunes commandes!\");\r\n            return;\r\n        }\r\n        System.out.println(\"\\nChoisissez une commande: \");\r\n        String[] cs = new String[cmds.size() + 1];\r\n        for (int i = 0; i < cmds.size(); ++i) {\r\n            cs[i] = cmds.get(i).getMenuDisplay();\r\n        }\r\n        cs[cmds.size()] = \"Retourner au menu\";\r\n        choix = selectionChoix(cs);\r\n        if (choix == cs.length)\r\n            return;\r\n        Commande cmd = cmds.get(choix - 1);\r\n        System.out.println(\"\\nCommande #\" + cmd.getId());\r\n        System.out.println(cmd.afficher());\r\n        System.out.println(\"Votre commande est \" + cmd.getEtat() + \".\");\r\n        while (true) {\r\n            System.out.println(\"\\nChoisissez une action: \");\r\n            choix = selectionChoix(new String[]{\"Confirmer la livraison\", \"Retourner un produit\", \"Évaluer un produit\",\r\n                    \"Annuler la commande\", \"Regarder la date d'arrivée estimée\", \"Retourner au menu\"});\r\n            switch (choix) {\r\n                case 1 -> {\r\n                    switch (cmd.confirmerLivraison()) {\r\n                        case 0 -> {\r\n                            System.out.println(\"\\nL'état de votre commande a été changé avec succès!\");\r\n                        }\r\n                        case 1 -> System.out.println(\"\\nVotre commande est toujours en production.\");\r\n                        case 2 -> System.out.println(\"\\nVous avez déjà confirmé la livraison de cette commande!\");\r\n\r\n                    }\r\n                }\r\n                case 2 -> {\r\n                    if (!cmd.estLivre()) {\r\n                        System.out.println(\"\\nVotre commande n'a pas encore été livrée!\");\r\n                        continue;\r\n                    }\r\n                    if (obtenirTempsEnSecondes() - cmd.getTempsReception() > 2592000) {\r\n                        System.out.println(\"\\nVous avez passé le délai de 30 jours pour retourner une commande!\");\r\n                        continue;\r\n                    }\r\n\r\n                    Produit p = cmd.getChoixProduit(true);\r\n                    if (p == null)\r\n                        continue;\r\n                    else if (acheteur.billetExiste(p.getId())) {\r\n                        System.out.println(\"\\nVous avez déjà fait un billet pour ce produit!\");\r\n                        continue;\r\n                    }\r\n                    System.out.print(\"Quel est le problème avec ce produit? \");\r\n                    try {\r\n                        String a = br.readLine();\r\n                        System.out.println(\"Voulez-vous effectuer un retour ou un échange?\");\r\n                        boolean estRetour = 1 == selectionChoix(new String[] {\"Retour\", \"Échange\"});\r\n                        Revendeur r = initialiserRevendeur(p.nomReven);\r\n                        String produitRempla = \"\";\r\n                        if (!estRetour) {\r\n                            System.out.println(\"Choisissez un produit parmi ceux offert par le revendeur: \");\r\n                            produitRempla = r.getProduitAvecChoix().titre;\r\n                        }\r\n                        Billet b = new Billet(p.getId(), acheteur.getUsername(), p.titre, a, estRetour, false,\r\n                                \"\", produitRempla, false);\r\n                        acheteur.addBillet(b);\r\n                        r.addBillet(b);\r\n                        Produit pro = initialiserProduit(produitRempla);\r\n                        float differencePrix = arrondirPrix(pro.prix - p.prix);\r\n                        System.out.println(\"La différence de prix est de \" + differencePrix + \"$.\");\r\n                        Commande echange = new Commande((short)0, differencePrix, 0);\r\n                        echange.addProduit(pro);\r\n                        echange.passerCommande(acheteur.getAddress());\r\n                        acheteur.ajouterCommande(echange);\r\n                        r.ajouterCommande(echange);\r\n                        System.out.println(\"\\nVotre demande \" + (b.estRetour ? \"de retour\" : \"d'échange\") + \" a été \" +\r\n                                \"traitée avec succès!\");\r\n\r\n                        //TODO NOTIF\r\n                        Notification notifRev = new Notification(8, acheteur.getUsername(), p.nomReven,\r\n                                p.titre, echange.getId());\r\n                        Revendeur rev = initialiserRevendeur(p.nomReven);\r\n                        rev.addNotifications(notifRev);\r\n\r\n                        System.out.println(\"Votre ID pour ce billet est: \" + p.getId());\r\n                        System.out.println(\"L'ID de votre commande est \" + echange.getId());\r\n\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                case 3 -> {\r\n                    if (!cmd.estLivre()) {\r\n                        System.out.println(\"\\nVotre commande n'a pas encore été livrée!\");\r\n                        continue;\r\n                    }\r\n                    Produit p = cmd.getChoixProduit(true);\r\n                    if (p == null)\r\n                        continue;\r\n                    ecrireEvaluation(p);\r\n                }\r\n                case 4 -> {\r\n                    if (cmd.estEnProduction()) {\r\n                        System.out.println(\"\\nVoulez-vous vraiment annuler votre commande?\");\r\n                        if (choixOuiNon()) {\r\n                            effacerFichier(COMMANDES_PATH + cmd.getId() + CSV);\r\n                            acheteur.annulerCommande(cmd);\r\n                            try {\r\n                                for (String re : cmd.getRevendeurs()) {\r\n                                    Revendeur r = initialiserRevendeur(re);\r\n                                    r.annulerCommande(r.trouverCommande(cmd.getId()));\r\n                                }\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n\r\n                            System.out.println(\"\\nVous avez annulé votre commande #\" + cmd.getId() + \"!\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    else\r\n                        System.out.println(\"\\nVous ne pouvez plus annuler votre commande!\");\r\n\r\n                }\r\n                case 5 -> {\r\n                    if (cmd.estLivre())\r\n                        System.out.println(\"\\nVotre commande est déjà livrée!\");\r\n                    else\r\n                        System.out.println(\"\\nVotre commande devrait arriver aujourd'hui le \" + new java.util.Date());\r\n                }\r\n                case 6 -> {return;}\r\n            }\r\n        }\r\n    }\r\n    static void allerAuPanier() {\r\n        if (acheteur.panier.estVide()) {\r\n            System.out.println(\"\\nVotre panier est vide!\");\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"\\nVoici votre panier:\");\r\n        System.out.println(acheteur.panier.afficher());\r\n        System.out.println(\"\\nChoisissez une action: \");\r\n        choix = selectionChoix(new String[] {\"Enlever un produit\", \"Passer la commande\", \"Retourner au menu\"});\r\n        switch (choix) {\r\n            case 1 -> {\r\n                Produit p = acheteur.panier.getChoixProduit(false);\r\n                acheteur.panier.removeProduit(p);\r\n                System.out.println(\"\\nVous avez enlevé \" + p.titre + \" du panier.\");\r\n                allerAuPanier();\r\n            }\r\n            case 2 -> {\r\n                try {\r\n                    System.out.println(\"Voulez-vous utiliser la même adresse que votre compte?\");\r\n                    String adresse = acheteur.getAddress();\r\n                    if (!choixOuiNon()) {\r\n                        System.out.print(\"Entrez une nouvelle adresse: \");\r\n                        adresse = br.readLine();\r\n                    }\r\n                    System.out.println(\"Voulez-vous payer avec vos points?\");\r\n                    if (choixOuiNon()) {\r\n                        float pointsEnDollars = arrondirPrix(acheteur.viderPoints() / 100f);\r\n                        float nouveauTotal = acheteur.panier.getCoutTotal() - pointsEnDollars;\r\n                        System.out.println(\"Vous avez l'équivalent de \" + pointsEnDollars + \"$ en points, ce qui \" +\r\n                                \"amène votre total à \" + nouveauTotal + \"$.\");\r\n                    }\r\n                    System.out.print(\"Entrez votre numéro de carte de crédit: \");\r\n                    demanderLong(\"un numéro de carte de crédit\");\r\n                    System.out.print(\"Entrez la date d'expiration de votre carte en format MMAA: \");\r\n                    demanderIntPositif(\"une date d'expiration\");\r\n                    System.out.print(\"Entrez le CVV: \");\r\n                    demanderIntPositif(\"un CVV\");\r\n                    Commande c = acheteur.panier.passerCommande(adresse);\r\n                    acheteur.ajouterCommande(c.copy());\r\n\r\n                    ArrayList<String> revens = new ArrayList<>();\r\n                    for (Produit p : c.getProduitsP()) {\r\n                        Revendeur r = initialiserRevendeur(p.nomReven);\r\n                        Notification notifRev = new Notification(6, acheteur.getUsername(), p.nomReven,\r\n                                p.titre, c.getId());\r\n                        r.addNotifications(notifRev);\r\n                        if (!revens.contains(p.nomReven)) {\r\n                            r.ajouterCommande(c);\r\n                            revens.add(r.getUsername());\r\n                        }\r\n                    }\r\n                    acheteur.panier.vider();\r\n                    System.out.println(\"\\nVotre commande a été passée avec succès!\");\r\n                    //TODO NOTIF\r\n                    System.out.println(\"Votre identifiant de commanque unique est: \" + c.getId());\r\n                }\r\n                catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    static void gererBillets() {\r\n        ArrayList<Billet> ba = acheteur.getBillets();\r\n        if (ba.isEmpty()) {\r\n            System.out.println(\"\\nVous n'avez aucun billet!\");\r\n            return;\r\n        }\r\n        while (true) {\r\n            System.out.println(\"\\nChoissisez un billet: \");\r\n            String[] bs = new String[ba.size() + 1];\r\n            for(int i = 0; i < ba.size(); ++i) {\r\n                bs[i] = ba.get(i).afficherMenu();\r\n            }\r\n            bs[bs.length - 1] = \"Retour au menu\";\r\n            choix = selectionChoix(bs);\r\n            if (choix == bs.length)\r\n                return;\r\n            Billet b = ba.get(choix - 1);\r\n            System.out.println(\"\\n\" + b.afficher());\r\n            if (!b.estRetour && !b.isRemplaLivre()) {\r\n                System.out.println(\"\\nQue voulez-vous faire ensuite?\");\r\n                choix = selectionChoix(new String[] {\"Confirmer l'arrivée du produit de remplacement\",\r\n                        \"Retourner aux billets\", \"Retourner au menu\"});\r\n                if (choix == 1) {\r\n                    if (b.comfirmerLivraisonRempla())\r\n                        System.out.println(\"\\nVous avez confirmé la livraison du produit de remplacement!\");\r\n                    else\r\n                        System.out.println(\"\\nVous avez déjà confirmé la réception du produit de remplacement!\");\r\n                }\r\n                else if (choix == 3)\r\n                    return;\r\n            }\r\n        }\r\n\r\n    }\r\n    static void ecrireEvaluation (Produit p) {\r\n        System.out.println(\"\\nÉvaluation du produit \" + p.titre + \":\");\r\n        System.out.print(\"Veuillez entrer une note entière entre 1 et 5: \");\r\n        try {\r\n            int note;\r\n            note = demanderIntPositif(\"une note\");\r\n            while (note > 5 || note == 0) {\r\n                System.out.print(\"Veuillez entrer une note plus petite ou égale à 5: \");\r\n                note = demanderIntPositif(\"une note\");\r\n            }\r\n            System.out.print(\"Entrez un commentaire sur le produit: \");\r\n            String comment = br.readLine();\r\n            Evaluation e = new Evaluation(acheteur.getUsername(), note, comment, false, new ArrayList<>());\r\n            p.addEvaluation(e);\r\n            System.out.println(\"\\nVotre évaluation a été écrite avec succès!\");\r\n\r\n            //TODO NOTIF\r\n            Notification notif = new Notification(7, acheteur.getUsername(), p.nomReven, p.titre, -1);\r\n            Revendeur r = initialiserRevendeur(p.nomReven);\r\n            r.addNotifications(notif);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    static void changerInformations() {\r\n        try {\r\n            choix = selectionChoix(new String[]{\"Modifier Prénom\", \"Modifier Nom\", \"Modifier Téléphone\",\r\n                    \"Modifier Adresse\", \"Modifier Mot de passe\", \"Modifier Adresse courriel\"});\r\n            switch (choix) {\r\n                case 1 -> {\r\n                    System.out.println(\"Rentrer votre nouveau prénom: \");\r\n                    String prenom = br.readLine();\r\n                    acheteur.setPrenom(prenom);\r\n                }\r\n                case 2 -> {\r\n                    System.out.println(\"Rentrer votre nouveau nom: \");\r\n                    String nom = br.readLine();\r\n                    acheteur.setNom(nom);\r\n                }\r\n                case 3 -> {\r\n                    System.out.println(\"Rentrer votre nouveau numéro de téléphone: \");\r\n                    long telephone = demanderLong(\"un numéro\");\r\n                    acheteur.setPhone(telephone);\r\n                }\r\n                case 4 -> {\r\n                    System.out.println(\"Rentrer votre nouvelle adresse: \");\r\n                    String adresse = br.readLine();\r\n                    acheteur.setPassword(adresse);\r\n                }\r\n                case 5 -> {\r\n                    System.out.println(\"Rentrer votre nouveau mot de passe: \");\r\n                    String password = br.readLine();\r\n                    acheteur.setPassword(password);\r\n                }\r\n                case 6 -> {\r\n                    System.out.println(\"Rentrer votre nouvelle adresse de courriel: \");\r\n                    String email = br.readLine();\r\n                    acheteur.setEmail(email);\r\n                }\r\n            }\r\n        } catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    static void gererAcheteursSuivis() { System.out.println(\"\\nTODO\"); }\r\n    static void rechercherRevendeur() {\r\n        while (true) {\r\n            System.out.println(\"\\nQuel type de recherche voulez-vous faire?\");\r\n            try {\r\n                ArrayList<String> revendeurSelect = new ArrayList<>();\r\n                List<String> revendeurs = fichiersDansDossier(REVENDEURS_PATH);\r\n                String demandeUtilisateur = \"\";\r\n                boolean estRecherche = 1 == selectionChoix(new String[]{\"Recherche par mots-clés\",\r\n                        \"Recherche par filtre\"});\r\n\r\n                if (estRecherche) {\r\n                    System.out.print(\"Entrez votre recherche: \");\r\n                    demandeUtilisateur = br.readLine();\r\n                } else {\r\n                    System.out.println(\"Choisissez votre type de filtre: \");\r\n                    choix = selectionChoix(new String[]{\"Catégorie de produits vendues\", \"Nom\", \"Adresse\"});\r\n                    switch (choix) {\r\n                        case 1 -> {\r\n                            System.out.println(\"Choisissez une catégorie: \");\r\n                            demandeUtilisateur = Categorie.getCat(selectionChoix(Categorie.categories) - 1);\r\n\r\n                        }\r\n                        case 2 -> {\r\n                            System.out.print(\"Entrez un nom: \");\r\n                            demandeUtilisateur = br.readLine();\r\n\r\n                        }\r\n                        case 3 -> {\r\n                            System.out.print(\"Entrez une adresse: \");\r\n                            demandeUtilisateur = br.readLine();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (String r : revendeurs) {\r\n                    String[] contenu = lireFichierEnEntier(REVENDEURS_PATH + r + \"/\" + INFOS);\r\n                    String adresse = contenu[0].split(\",\")[3];\r\n                    List<String> categories = Arrays.asList(contenu[2].split(\",\"));\r\n\r\n                    if (estRecherche) {\r\n                        if (r.contains(demandeUtilisateur))\r\n                            revendeurSelect.add(r);\r\n                    } else {\r\n                        switch (choix) {\r\n                            case 1 -> {\r\n                                if (categories.contains(demandeUtilisateur))\r\n                                    revendeurSelect.add(r);\r\n                            }\r\n                            case 2 -> {\r\n                                if (r.contains(demandeUtilisateur))\r\n                                    revendeurSelect.add(r);\r\n                            }\r\n                            case 3 -> {\r\n                                if (adresse.contains(demandeUtilisateur))\r\n                                    revendeurSelect.add(r);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (revendeurSelect.isEmpty()) {\r\n                    System.out.println(\"\\nAucun résultat pour cette recherche. Veuillez réessayer.\");\r\n                    continue;\r\n                }\r\n                revendeurSelect.add(\"Faire une nouvelle recherche\");\r\n                revendeurSelect.add(\"Retourner au menu acheteur\");\r\n                while (true) {\r\n                    System.out.println(\"\\nChoisissez un revendeur: \");\r\n                    choix = selectionChoix(revendeurSelect.toArray());\r\n                    if (choix == revendeurSelect.size() - 1)\r\n                        break;\r\n                    else if (choix == revendeurSelect.size())\r\n                        return;\r\n                    Revendeur r = initialiserRevendeur(revendeurSelect.get(choix - 1));\r\n                    System.out.println(r.afficherMetriques());\r\n                    System.out.println(\"\\nQue voulez-vous faire ensuite?\");\r\n                    choix = selectionChoix(new String[]{\"Liker le revendeur\", \"Retourner au résultat de la recherche\"});\r\n                    if (choix == 1) {\r\n                        if (r.ajouterFollower(acheteur.getUsername()))\r\n                            System.out.println(\"\\nFélicitations! Vous suivez maintenant le revendeur.\");\r\n                        else\r\n                            System.out.println(\"\\nVous suivez déjà ce revendeur.\");\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                System.out.println(\"Quelque chose s'est mal passé. Veuillez réessayer.\");\r\n                rechercherProduits();\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/unishop/ControleurAcheteur.java b/src/main/java/unishop/ControleurAcheteur.java
--- a/src/main/java/unishop/ControleurAcheteur.java	
+++ b/src/main/java/unishop/ControleurAcheteur.java	
@@ -157,7 +157,14 @@
                     if (choix == 6)
                         break;
                     switch (choix) {
-                        case 1 -> System.out.println("\n" + p.liker(acheteur.getUsername()));
+                        case 1 -> {
+                            if (p.liker(acheteur.getUsername())) {
+                                System.out.println("\nVous avez liké le produit " + p.titre + "!");
+                            }
+                            else
+                                System.out.println("\nVous avez déjà liké ce produit!");
+
+                        }
                         case 2 -> {
                             if (p.getQuantite() == 0) {
                                 System.out.println("\nLe produit " + p.titre + " doit être restocké.");
@@ -324,17 +331,16 @@
                         System.out.println("La différence de prix est de " + differencePrix + "$.");
                         Commande echange = new Commande((short)0, differencePrix, 0);
                         echange.addProduit(pro);
-                        echange.passerCommande(acheteur.getAddress());
+                        echange.passerCommande(acheteur.getUsername(), acheteur.getAddress());
                         acheteur.ajouterCommande(echange);
                         r.ajouterCommande(echange);
                         System.out.println("\nVotre demande " + (b.estRetour ? "de retour" : "d'échange") + " a été " +
                                 "traitée avec succès!");
 
                         //TODO NOTIF
-                        Notification notifRev = new Notification(8, acheteur.getUsername(), p.nomReven,
-                                p.titre, echange.getId());
                         Revendeur rev = initialiserRevendeur(p.nomReven);
-                        rev.addNotifications(notifRev);
+                        rev.addNotifications(new Notification(8, acheteur.getUsername(), p.nomReven,
+                                p.titre, echange.getId()));
 
                         System.out.println("Votre ID pour ce billet est: " + p.getId());
                         System.out.println("L'ID de votre commande est " + echange.getId());
@@ -424,15 +430,16 @@
                     demanderIntPositif("une date d'expiration");
                     System.out.print("Entrez le CVV: ");
                     demanderIntPositif("un CVV");
-                    Commande c = acheteur.panier.passerCommande(adresse);
+                    Commande c = acheteur.panier.passerCommande(acheteur.getUsername(), adresse);
                     acheteur.ajouterCommande(c.copy());
 
+                    //TODO NOTIF
                     ArrayList<String> revens = new ArrayList<>();
                     for (Produit p : c.getProduitsP()) {
                         Revendeur r = initialiserRevendeur(p.nomReven);
-                        Notification notifRev = new Notification(6, acheteur.getUsername(), p.nomReven,
-                                p.titre, c.getId());
-                        r.addNotifications(notifRev);
+                        r.ajouterVente(p.prix);
+                        r.addNotifications(new Notification(6, acheteur.getUsername(), p.nomReven,
+                                p.titre, c.getId()));
                         if (!revens.contains(p.nomReven)) {
                             r.ajouterCommande(c);
                             revens.add(r.getUsername());
@@ -440,7 +447,6 @@
                     }
                     acheteur.panier.vider();
                     System.out.println("\nVotre commande a été passée avec succès!");
-                    //TODO NOTIF
                     System.out.println("Votre identifiant de commanque unique est: " + c.getId());
                 }
                 catch (IOException e) {
@@ -501,9 +507,8 @@
             System.out.println("\nVotre évaluation a été écrite avec succès!");
 
             //TODO NOTIF
-            Notification notif = new Notification(7, acheteur.getUsername(), p.nomReven, p.titre, -1);
             Revendeur r = initialiserRevendeur(p.nomReven);
-            r.addNotifications(notif);
+            r.addNotifications(new Notification(7, acheteur.getUsername(), p.nomReven, p.titre, -1));
 
         } catch (IOException e) {
             e.printStackTrace();
@@ -511,36 +516,37 @@
     }
     static void changerInformations() {
         try {
+            System.out.println("\nChoississez ce que vous voulez modifier: ");
             choix = selectionChoix(new String[]{"Modifier Prénom", "Modifier Nom", "Modifier Téléphone",
                     "Modifier Adresse", "Modifier Mot de passe", "Modifier Adresse courriel"});
             switch (choix) {
                 case 1 -> {
-                    System.out.println("Rentrer votre nouveau prénom: ");
+                    System.out.println("Entrez votre nouveau prénom: ");
                     String prenom = br.readLine();
                     acheteur.setPrenom(prenom);
                 }
                 case 2 -> {
-                    System.out.println("Rentrer votre nouveau nom: ");
+                    System.out.println("Entrez votre nouveau nom: ");
                     String nom = br.readLine();
                     acheteur.setNom(nom);
                 }
                 case 3 -> {
-                    System.out.println("Rentrer votre nouveau numéro de téléphone: ");
+                    System.out.println("Rentrez votre nouveau numéro de téléphone: ");
                     long telephone = demanderLong("un numéro");
                     acheteur.setPhone(telephone);
                 }
                 case 4 -> {
-                    System.out.println("Rentrer votre nouvelle adresse: ");
+                    System.out.println("Entrez votre nouvelle adresse: ");
                     String adresse = br.readLine();
                     acheteur.setPassword(adresse);
                 }
                 case 5 -> {
-                    System.out.println("Rentrer votre nouveau mot de passe: ");
+                    System.out.println("Entrez votre nouveau mot de passe: ");
                     String password = br.readLine();
                     acheteur.setPassword(password);
                 }
                 case 6 -> {
-                    System.out.println("Rentrer votre nouvelle adresse de courriel: ");
+                    System.out.println("Entrez votre nouvelle adresse de courriel: ");
                     String email = br.readLine();
                     acheteur.setEmail(email);
                 }
Index: src/main/java/unishop/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unishop;\r\n\r\nimport unishop.Users.*;\r\nimport unishop.Categories.*;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.*;\r\n\r\n\r\nimport static unishop.ControleurAcheteur.menuAcheteur;\r\nimport static unishop.ControleurInvite.menuInvite;\r\nimport static unishop.ControleurRevendeur.menuRevendeur;\r\n//import java.util.regex.*;\r\n\r\npublic class Main {\r\n\r\n    public final static String DATABASE_PATH = \"Database/\";\r\n    public final static String PRODUITS_PATH = DATABASE_PATH + \"Produits/\";\r\n    public final static String USERS_PATH = DATABASE_PATH + \"Users/\";\r\n    public final static String ACHETEURS_PATH = USERS_PATH + \"Acheteurs/\";\r\n    public final static String REVENDEURS_PATH = USERS_PATH + \"Revendeurs/\";\r\n    public final static String COMMANDES_PATH = DATABASE_PATH + \"Commandes/\";\r\n    public final static String BILLETS_PATH = DATABASE_PATH + \"Billets/\";\r\n    public final static String CSV = \".csv\";\r\n    public final static String IDS = DATABASE_PATH + \"IDs.csv\";\r\n    public final static String EMAILS = DATABASE_PATH + \"emails.csv\";\r\n    public final static String NOTIFICATIONS = \"Notifications.csv\";\r\n    public final static String PANIER = \"Panier.csv\";\r\n    public final static String INFOS = \"Infos.csv\";\r\n    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n    private static User connectedUser = null;\r\n    private static short choix;\r\n\r\n    public static void main(String[] args) {\r\n        menuPrincipal();\r\n        System.out.println(\"\\nAu plaisir de vous revoir!\");\r\n    }\r\n    static void menuPrincipal(){\r\n        while (true) {\r\n            System.out.println(\"\\nBienvenue sur UniShop!\");\r\n            choix = selectionChoix(new String[]{\"Se connecter\", \"Créer un compte\", \"Continuer en tant qu'invité\",\r\n                    \"Quitter UniShop\"});\r\n            switch (choix) {\r\n                case 1 -> {\r\n                    connectedUser = connecterUser();\r\n                    if (connectedUser == null)\r\n                        continue;\r\n                    System.out.print(\"\\nRebonjour \" + connectedUser.getUsername() + \" ! \");\r\n                    connectedUser.save();\r\n                    if (connectedUser.isAcheteur())\r\n                        menuAcheteur((Acheteur) connectedUser);\r\n                    else\r\n                        menuRevendeur((Revendeur) connectedUser);\r\n                    connectedUser = null;\r\n                }\r\n                case 2 -> creerCompte();\r\n                case 3 -> menuInvite();\r\n                case 4 -> {return;}\r\n            }\r\n        }\r\n    }\r\n\r\n    public static boolean choixOuiNon() {\r\n        System.out.println(\"1. Oui\\n2. Non\");\r\n        try {\r\n            while (true) {\r\n                System.out.print(\"Choisir une option: \");\r\n                String reponseS = br.readLine();\r\n                try {\r\n                    short reponse = Short.parseShort(reponseS);\r\n                    if (reponse == 1 || reponse == 2)\r\n                        return reponse == 1;\r\n                    else\r\n                        System.out.println(\"Choix invalide! Veuillez entrer un choix de 1 à 2\");\r\n                }\r\n                catch(NumberFormatException e){\r\n                    System.out.println(\"Veuillez entrer un chiffre de 1 à 2\");\r\n                }\r\n            }\r\n        }\r\n        catch(IOException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    public static short selectionChoix(Object[] choix) {\r\n        int nbChoix = choix.length;\r\n        for (int i = 0; i < nbChoix; ++i) {\r\n            System.out.println(i + 1 + \". \" + choix[i]);\r\n        }\r\n        try {\r\n            while (true) {\r\n                System.out.print(\"Choisir une option: \");\r\n                String reponseS = br.readLine();\r\n                try {\r\n                    short reponse = Short.parseShort(reponseS);\r\n                    if (reponse < nbChoix + 1 && reponse > 0)\r\n                        return reponse;\r\n                    else\r\n                        System.out.println(\"Choix invalide! Veuillez entrer un choix de 1 à \" + nbChoix);\r\n                }\r\n                catch(NumberFormatException e){\r\n                    System.out.println(\"Veuillez entrer un chiffre de 1 à \" + nbChoix);\r\n                }\r\n            }\r\n        }\r\n        catch(IOException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    static void creerCompte() {\r\n        System.out.println(\"\\nChoisissez le type de compte à créer:\");\r\n        choix = selectionChoix(new String[]{\"Acheteur\", \"Revendeur\", \"Revenir au menu principal\"});\r\n        if (choix == 3)\r\n            return;\r\n        System.out.println(\"\\nRemplissez le formulaire pour créer un compte:\");\r\n        System.out.print(\"Entrez votre username: \");\r\n        try {\r\n            String username = br.readLine();\r\n            List<String> acheteurs = fichiersDansDossier(ACHETEURS_PATH);\r\n            List<String> revendeurs = fichiersDansDossier(REVENDEURS_PATH);\r\n            while (acheteurs.contains(username) || revendeurs.contains(username)) {\r\n                System.out.print(\"Ce Username existe déjà. Veuillez entrer un autre Username: \");\r\n                username = br.readLine();\r\n            }\r\n            System.out.print(\"Entrez votre mot de passe: \");\r\n            String motDePasse = br.readLine();\r\n            System.out.print(\"Entrez votre courriel: \");\r\n            String courriel = br.readLine();\r\n            ArrayList<String> emails = iniArrayList(lireFichierEnEntier(EMAILS)[0]);\r\n            while (emails.contains(courriel) || courriel.isEmpty()) {\r\n                System.out.print(\"Un compte a déjà été créé avec ce courriel. Veuillez en entrer un autre: \");\r\n                courriel = br.readLine();\r\n            }\r\n            emails.add(courriel);\r\n            ecrireFichierEntier(EMAILS, String.join(\",\", emails));\r\n            System.out.print(\"Entrez votre téléphone: \");\r\n            long telephone = demanderLong(\"un téléphone\");\r\n            System.out.print(\"Entrez votre adresse: \");\r\n            String adresse = br.readLine();\r\n            if (choix == 1) {\r\n                String basePath =  ACHETEURS_PATH + username + \"/\";\r\n                System.out.print(\"Entrez votre nom: \");\r\n                String nom = br.readLine();\r\n                System.out.print(\"Entrez votre prénom: \");\r\n                String prenom = br.readLine();\r\n                if (new File(basePath).mkdir()) {\r\n                    String[] infos = new String[] {motDePasse, courriel, \"\" + telephone , adresse, nom, prenom,\r\n                            \"0,0\", \"\" + obtenirTempsEnSecondes()};\r\n                    ecrireFichierEntier(basePath + INFOS, String.join(\",\", infos) + \"\\n\\n\\n\\n\\n\");\r\n                    ecrireFichierEntier(basePath + PANIER, \"0,0\");\r\n                    System.out.println(\"Inscription du compte acheteur \" + username + \" réussi!\");\r\n                }\r\n                else\r\n                    System.out.println(\"Erreur lors de la création du dossier. Veuillez recommencer\");\r\n\r\n            } else {\r\n                String basePath = REVENDEURS_PATH + username + \"/\";\r\n                if (new File(basePath).mkdir()) {\r\n                    String[] infos = new String[] {motDePasse, courriel, \"\" + telephone , adresse, \"0,0,0, \",\r\n                            \"\" + obtenirTempsEnSecondes() };\r\n                    ecrireFichierEntier(basePath + INFOS, String.join(\",\", infos) + \"\\n\\n\\n\\n\\n\");\r\n                    System.out.println(\"Inscription du compte revendeur \" + username + \" réussi!\");\r\n                }\r\n                else\r\n                    System.out.println(\"Erreur lors de la création du dossier. Veuillez recommencer\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    static User connecterUser() {\r\n        try {\r\n            System.out.println(\"\\nConnection (Ne rien rentrer retourne au menu principal): \");\r\n            String categorie = \"\";\r\n            String username = \"\";\r\n            while (categorie.isEmpty()) {\r\n                System.out.print(\"Entrez votre Username: \");\r\n                username = br.readLine();\r\n                if (username.isEmpty())\r\n                    return null;\r\n                File dossier = new File (ACHETEURS_PATH + username);\r\n                if (dossier.exists()) {\r\n                    categorie = \"Acheteurs/\";\r\n                }\r\n                dossier = new File (REVENDEURS_PATH + username);\r\n                if (dossier.exists()) {\r\n                    categorie = \"Revendeurs/\";\r\n                }\r\n                if (categorie.isEmpty()) {\r\n                    System.out.println(\"Username inconnu. Veuillez réessayer\");\r\n                }\r\n            }\r\n\r\n            String[] data = lireFichierEnEntier(USERS_PATH + categorie + username + \"/\" + INFOS);\r\n            String[] infos = data[0].split(\",\");\r\n            String password = infos[0];\r\n            System.out.print(\"Entrez votre mot de passe: \");\r\n            String passwordEntre = br.readLine();\r\n            if (passwordEntre.isEmpty())\r\n                return null;\r\n            while (!(password.equals(passwordEntre))) {\r\n                System.out.print(\"Mauvais mot de passe! Veuillez recommencer: \");\r\n                passwordEntre = br.readLine();\r\n            }\r\n            if (infos.length == 9) {\r\n                long creationTime = Long.parseLong(infos[8]);\r\n                if (obtenirTempsEnSecondes() - creationTime > 86400) {\r\n                    System.out.println(\"\\nCe compte a été créé il y a plus de 24h et est donc invalide! Veuillez créer\"+\r\n                            \"un nouveau compte!\");\r\n                    effacerFichier(USERS_PATH + categorie + username);\r\n                }\r\n                else\r\n                    System.out.println(\"Votre compte est maintenant activé!\");\r\n            }\r\n            if (categorie.equals(\"Acheteurs/\")){\r\n                return initialiserAcheteur(username);\r\n            }\r\n            else {\r\n                return initialiserRevendeur(username);\r\n            }\r\n        }\r\n        catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    public static Acheteur initialiserAcheteur(String username) throws IOException {\r\n        String path = ACHETEURS_PATH + username + \"/\";\r\n        String[] data = lireFichierEnEntier( path+ INFOS);\r\n        String[] infos = data[0].split(\",\");\r\n        ArrayList<String> as =  iniArrayList(data[1]);\r\n        ArrayList<String> rl =  iniArrayList(data[2]);\r\n        ArrayList<Commande> cmds = new ArrayList<>();\r\n        for (String id : iniArrayList(data[3]))\r\n            cmds.add(initialiserCommande(Integer.parseInt(id)));\r\n        ArrayList<Billet> bis = new ArrayList<>();\r\n        for (String id : iniArrayList(data[4]))\r\n            bis.add(initialiserBillet(Integer.parseInt(id)));\r\n        Stack<Notification> notifs = new Stack<>();\r\n        for (int i = 5; i < data.length; ++i) {\r\n            String[] n = data[i].split(\",\");\r\n            notifs.push(new Notification(Integer.parseInt(n[0]), n[1], n[2], n[3], Integer.parseInt(n[4])));\r\n        }\r\n        String[] dataPanier = lireFichierEnEntier(path + PANIER);\r\n        String[] infosPanier = dataPanier[0].split(\",\");\r\n        float coutT = Float.parseFloat(infosPanier[0]);\r\n        int pts = Integer.parseInt(infosPanier[1]);\r\n        Commande panier = new Commande((short) 0, coutT, pts);\r\n        for (int j = 1; j < dataPanier.length; ++j) {\r\n            Produit p = initialiserProduit(dataPanier[j]);\r\n            panier.addInitial(p);\r\n        }\r\n        return new Acheteur(username, infos[0], infos[1], Long.parseLong(infos[2]),\r\n                infos[3], infos[4], infos[5], Integer.parseInt(infos[6]), Integer.parseInt(infos[7]), as, rl, bis,\r\n                panier, cmds, notifs);\r\n    }\r\n    static Revendeur initialiserRevendeur(String username) throws IOException {\r\n        String path = REVENDEURS_PATH + username + \"/\";\r\n        String[] data = lireFichierEnEntier( path+ INFOS);\r\n        String[] infos = data[0].split(\",\");\r\n        ArrayList<String> followers = iniArrayList(data[1]);\r\n        ArrayList<String> cats = iniArrayList(data[2]);\r\n        ArrayList<Commande> cmds = new ArrayList<>();\r\n        for (String id : iniArrayList(data[3]))\r\n            cmds.add(initialiserCommande(Integer.parseInt(id)));\r\n        ArrayList<Billet> bis = new ArrayList<>();\r\n        for (String id : iniArrayList(data[4]))\r\n            bis.add(initialiserBillet(Integer.parseInt(id)));\r\n        Stack<Notification> notifs = new Stack<>();\r\n        for (int i = 5; i < data.length; ++i) {\r\n            String[] n = data[i].split(\",\");\r\n            notifs.push(new Notification(Integer.parseInt(n[0]), n[1], n[2], n[3], Integer.parseInt(n[4])));\r\n        }\r\n        ArrayList<Produit> ps = new ArrayList<>();\r\n        for(String pc : fichiersDansDossier(PRODUITS_PATH)){\r\n            String r = lireFichierEnEntier(PRODUITS_PATH + pc)[0].split(\",\")[0];\r\n            if (r.equals(username))\r\n                ps.add(initialiserProduit(pc));\r\n        }\r\n        return new Revendeur(username, infos[0], infos[1], Long.parseLong(infos[2]), infos[3],\r\n                Float.parseFloat(infos[4]), Integer.parseInt(infos[5]), followers, bis, ps, cmds, cats, notifs);\r\n    }\r\n    static Produit initialiserProduit(String titreProduit) throws IOException{\r\n        String path = PRODUITS_PATH + titreProduit;\r\n        if (!titreProduit.endsWith(CSV))\r\n            path += CSV;\r\n        String[] s = lireFichierEnEntier(path);\r\n        String[] f = s[0].split(\",\");\r\n        String[] images = s[1].split(\",\");\r\n        String[] videos = s[2].split(\",\");\r\n        String[] cs = s[3].split(\",\");\r\n        Categorie c = null;\r\n        switch (Short.parseShort(cs[0])) {\r\n            case 0 -> c = new CLivres(cs[1], cs[2], cs[3], Long.parseLong(cs[4]), cs[5], Integer.parseInt(cs[6]),\r\n                    Integer.parseInt(cs[7]));\r\n            case 1 -> c = new CRessources(cs[1], cs[2], cs[3], Long.parseLong(cs[4]), cs[5], Integer.parseInt(cs[6]));\r\n            case 2 -> c = new CPapeterie(cs[1], cs[2], cs[3]);\r\n            case 3 -> c = new CInformatique(cs[1], cs[2], cs[3], cs[4]);\r\n            case 4 -> c = new CBureau(cs[1], cs[2], cs[3]);\r\n        }\r\n        ArrayList<String> likes =  iniArrayList(s[4]);\r\n        ArrayList<Evaluation> evals = new ArrayList<>();\r\n        for (int i = 5; i < s.length; ++i) {\r\n            String[] e = s[i].split(\",\");\r\n            ArrayList<String> elikes = new ArrayList<>(Arrays.asList(e).subList(5, e.length));\r\n            evals.add(new Evaluation(e[0], Integer.parseInt(e[1]), e[2], Boolean.parseBoolean(e[4]), elikes)) ;\r\n        }\r\n        return new Produit(f[0], f[1], f[2], Float.parseFloat(f[3]), Integer.parseInt(f[4]), Integer.parseInt(f[5]),\r\n                images, videos, c, likes, evals);\r\n    }\r\n    static Commande initialiserCommande(int id) throws IOException {\r\n        String[] lines = lireFichierEnEntier(COMMANDES_PATH + id + CSV);\r\n        String[] fstLine = lines[0].split(\",\");\r\n        Commande c = new Commande(Short.parseShort(fstLine[2]), Float.parseFloat(fstLine[3]),\r\n                Integer.parseInt(fstLine[4]));\r\n        long rec = 0;\r\n        if (c.estLivre())\r\n            rec = Long.parseLong(fstLine[6]);\r\n        c.addPastInfo(Integer.parseInt(fstLine[0]), fstLine[1], fstLine[5], rec);\r\n        for (int j = 1; j < lines.length; ++j) {\r\n            String[] line = lines[j].split(\",\");\r\n            Produit p = initialiserProduit(line[0]);\r\n            p.setUniqueId(Integer.parseInt(line[1]));\r\n            c.addInitial(p);\r\n        }\r\n        return c;\r\n    }\r\n    static Billet initialiserBillet(int id) throws IOException{\r\n        String[] bs = lireFichierEnEntier(BILLETS_PATH + id + CSV)[0].split(\",\");\r\n        return new Billet(Integer.parseInt(bs[0]), bs[1], bs[2], bs[3], Boolean.parseBoolean(bs[4]),\r\n                Boolean.parseBoolean(bs[5]) , bs[6], bs[7], Boolean.parseBoolean(bs[8]));\r\n    }\r\n    public static int demanderIntPositif(String demande) throws IOException {\r\n        int i;\r\n        while (true) {\r\n            try {\r\n                i = Integer.parseInt(br.readLine());\r\n                if (i >= 0)\r\n                    return i;\r\n                else {\r\n                    System.out.print(\"Veuillez entrer un entier positif: \");\r\n                }\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.out.print(\"Veuillez entrer \" + demande + \" valide: \");\r\n            }\r\n        }\r\n    }\r\n    public static long demanderLong(String demande) throws IOException {\r\n        long l;\r\n        while (true) {\r\n            try {\r\n                l = Long.parseLong(br.readLine());\r\n                return l;\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.out.print(\"Veuillez entrer \" + demande + \" valide: \");\r\n            }\r\n        }\r\n    }\r\n    public static float demanderFloat(String demande) throws IOException {\r\n        float prix;\r\n        while (true) {\r\n            try {\r\n                prix = arrondirPrix(Float.parseFloat(br.readLine()));\r\n                if (prix >= 0)\r\n                    return arrondirPrix(prix);\r\n                else\r\n                    System.out.print(\"Veuillez entrer un chiffre à virgule positif: \");\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.out.print(\"Veuillez entrer \" + demande + \" valide (Nombre à virgule): \");\r\n            }\r\n        }\r\n    }\r\n\r\n    // TEST\r\n    public static float arrondirPrix(float prix) {\r\n        return Math.round((prix) * 100) / 100f;\r\n    }\r\n    public static long obtenirTempsEnSecondes() {\r\n        return System.currentTimeMillis() / 1000;\r\n    }\r\n\r\n    public static String[] lireFichierEnEntier(String path) throws IOException {\r\n        return Files.readAllLines(Paths.get(path), StandardCharsets.UTF_8).toArray(new String[0]);\r\n    }\r\n\r\n    public static void ecrireFichierEntier(String path, String toWrite) {\r\n        try {\r\n            BufferedWriter bw = new BufferedWriter(new FileWriter(path));\r\n            bw.write(toWrite);\r\n            bw.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    static List<String> fichiersDansDossier(String path) {\r\n        return Arrays.asList(Objects.requireNonNull(new File(path).list()));\r\n    }\r\n    public static ArrayList<String> iniArrayList(String s) {\r\n        String[] tab = s.split(\",\");\r\n        if (tab[0].isEmpty())\r\n            return new ArrayList<>(Arrays.asList(tab).subList(1, tab.length));\r\n        else\r\n            return new ArrayList<>(Arrays.asList(tab));\r\n\r\n    }\r\n    public static String getConnectedUsername() {\r\n        return connectedUser.getUsername();\r\n    }\r\n    public static void effacerFichier(String path) {\r\n        File file = new File(path);\r\n        File[] contents = file.listFiles();\r\n        if (contents != null) {\r\n            for (File f : contents) {\r\n                effacerFichier(f.getPath());\r\n            }\r\n        }\r\n        if (!file.delete())\r\n            System.out.println(\"Compte pas effacé: \" + file);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/unishop/Main.java b/src/main/java/unishop/Main.java
--- a/src/main/java/unishop/Main.java	
+++ b/src/main/java/unishop/Main.java	
@@ -13,7 +13,6 @@
 import static unishop.ControleurAcheteur.menuAcheteur;
 import static unishop.ControleurInvite.menuInvite;
 import static unishop.ControleurRevendeur.menuRevendeur;
-//import java.util.regex.*;
 
 public class Main {
 
@@ -26,8 +25,7 @@
     public final static String BILLETS_PATH = DATABASE_PATH + "Billets/";
     public final static String CSV = ".csv";
     public final static String IDS = DATABASE_PATH + "IDs.csv";
-    public final static String EMAILS = DATABASE_PATH + "emails.csv";
-    public final static String NOTIFICATIONS = "Notifications.csv";
+    public final static String EMAILS = DATABASE_PATH + "Emails.csv";
     public final static String PANIER = "Panier.csv";
     public final static String INFOS = "Infos.csv";
     public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
@@ -163,7 +161,7 @@
             } else {
                 String basePath = REVENDEURS_PATH + username + "/";
                 if (new File(basePath).mkdir()) {
-                    String[] infos = new String[] {motDePasse, courriel, "" + telephone , adresse, "0,0,0, ",
+                    String[] infos = new String[] {motDePasse, courriel, "" + telephone , adresse, "0,0, , ",
                             "" + obtenirTempsEnSecondes() };
                     ecrireFichierEntier(basePath + INFOS, String.join(",", infos) + "\n\n\n\n\n");
                     System.out.println("Inscription du compte revendeur " + username + " réussi!");
@@ -322,8 +320,8 @@
                 Integer.parseInt(fstLine[4]));
         long rec = 0;
         if (c.estLivre())
-            rec = Long.parseLong(fstLine[6]);
-        c.addPastInfo(Integer.parseInt(fstLine[0]), fstLine[1], fstLine[5], rec);
+            rec = Long.parseLong(fstLine[7]);
+        c.addPastInfo(Integer.parseInt(fstLine[0]), fstLine[1], fstLine[5], fstLine[6], rec);
         for (int j = 1; j < lines.length; ++j) {
             String[] line = lines[j].split(",");
             Produit p = initialiserProduit(line[0]);
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_20\" default=\"true\" project-jdk-name=\"openjdk-20\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="openjdk-20" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="20" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/unishop/ControleurInvite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unishop;\r\n\r\nimport unishop.Categories.Categorie;\r\nimport unishop.Users.Acheteur;\r\nimport unishop.Users.Revendeur;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport static unishop.Main.*;\r\n\r\npublic class ControleurInvite {\r\n    static short choix;\r\n    static void menuInvite(){\r\n        while (true) {\r\n            System.out.println(\"\\nVoici le menu Invité:\");\r\n            choix = selectionChoix(new String[]{\"Trouver un acheteur\", \"Trouver un revendeur\", \"Trouver un produit\",\r\n                    \"Retourner au menu principal\"});\r\n            switch (choix) {\r\n                case 1 -> trouverAcheteur();\r\n                case 2 -> trouverRevendeur();\r\n                case 3 -> trouverProduits();\r\n                case 4 -> {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static void trouverAcheteur() {\r\n        try {\r\n            while (true) {\r\n                System.out.print(\"\\nEntrer le nom d'un acheteur (N'entrez rien pour la liste de tous les acheteurs): \");\r\n                Acheteur acheteur;\r\n                String aEntre = br.readLine();\r\n                ArrayList<String> aSelect = new ArrayList<>();\r\n                for (String a : fichiersDansDossier(ACHETEURS_PATH)) {\r\n                    if (a.contains(aEntre))\r\n                        aSelect.add(a);\r\n                }\r\n                if (aSelect.isEmpty()) {\r\n                    System.out.println(\"Aucun acheteur ne correspond à cette recherche! Veuillez réessayer.\");\r\n                    continue;\r\n                }\r\n                aSelect.add(\"Faire une nouvelle recherche\");\r\n                aSelect.add(\"Retourner au menu\");\r\n                System.out.println(\"Sélectionnez une option: \");\r\n                choix = selectionChoix(aSelect.toArray());\r\n                if (choix == aSelect.size() - 2)\r\n                    continue;\r\n                else if (choix == aSelect.size() - 1)\r\n                    return;\r\n                acheteur = initialiserAcheteur(aSelect.get(choix - 1));\r\n                while (true) {\r\n                    System.out.println(\"\\nVoici les informations sur \" + acheteur.getUsername() + \": \" +\r\n                            acheteur.afficherMetriques());\r\n                    System.out.println(\"\\nQue voulez-vous faire ensuite?\");\r\n                    choix = selectionChoix(new String[] {\"Voir les followers\", \"Voir les suivis\",\r\n                            \"Faire une autre recherche\", \"Retourner au menu principal\"});\r\n                    if (choix == 3)\r\n                        break;\r\n                    else if (choix == 4)\r\n                        return;\r\n                    if (choix == 1)\r\n                        aSelect = acheteur.getFollowers();\r\n                    else\r\n                        aSelect = acheteur.getSuivis();\r\n                    if (aSelect.isEmpty()) {\r\n                        if (choix == 1)\r\n                            System.out.println(\"\\n\" + acheteur.getUsername() + \" n'a aucun follower!\");\r\n                        else\r\n                            System.out.println(\"\\n\" + acheteur.getUsername() + \" ne suit aucun acheteur!\");\r\n                        continue;\r\n                    }\r\n                    System.out.println(\"\\nChoississez un acheteur: \");\r\n                    choix = selectionChoix(aSelect.toArray());\r\n                    acheteur = initialiserAcheteur(aSelect.get(choix));\r\n                }\r\n\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n    static void trouverProduits() {\r\n        try {\r\n            while (true) {\r\n                System.out.println(\"\\nQuel type de recherche voulez-vous faire?\");\r\n                ArrayList<String> pSelect = new ArrayList<>();\r\n                List<String> produits = fichiersDansDossier(PRODUITS_PATH);\r\n                boolean estRecherche = 1 == selectionChoix(new String[]{\"Recherche par mots-clés\",\r\n                        \"Recherche par filtre\"});\r\n                String recherche = \"\";\r\n                short choixCat = 0;\r\n                boolean estPrixPlusGrand = false;\r\n                float floatDemande = 0;\r\n                int nbLikesDemande = 0;\r\n                if (estRecherche) {\r\n                    System.out.print(\"Entrez votre recherche: \");\r\n                    recherche = br.readLine();\r\n                } else {\r\n                    System.out.println(\"Choisissez votre type de filtre: \");\r\n                    choix = selectionChoix(new String[]{\"Catégorie\", \"Prix\", \"Popularité\", \"Note moyenne\",\r\n                            \"Promotion\"});\r\n                    switch (choix) {\r\n                        case 1 -> {\r\n                            System.out.println(\"Choisissez une catégorie: \");\r\n                            choixCat = selectionChoix(Categorie.categories);\r\n                            --choixCat;\r\n                        }\r\n                        case 2 -> {\r\n                            System.out.println(\"Filtrer par plus petit ou plus grand?\");\r\n                            estPrixPlusGrand = 1 == selectionChoix(new String[]{\"Plus petit\", \"Plus grand\"});\r\n                            System.out.print(\"Entrez un prix: \");\r\n                            floatDemande = demanderFloat(\"un prix\");\r\n                        }\r\n                        case 3 -> {\r\n                            System.out.print(\"Entrez un nombre minimum de likes: \");\r\n                            nbLikesDemande = demanderIntPositif(\"un nombre de likes\");\r\n                        }\r\n                        case 4 -> {\r\n                            System.out.print(\"Entrez une note moyenne minimale: \");\r\n                            floatDemande = demanderFloat(\"une note\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (String p : produits) {\r\n                    String[] contenu = lireFichierEnEntier(PRODUITS_PATH + p);\r\n                    String[] infos = contenu[0].split(\",\");\r\n                    String[] cat = contenu[3].split(\",\");\r\n                    String produitPreview = String.join(\", \", infos[1],\r\n                            Categorie.getCat(Integer.parseInt(cat[0])), \"Revendeur: \" + infos[0]);\r\n                    if (estRecherche) {\r\n                        if ((infos[1] + infos[2] + cat[1] + cat[2] + cat[3]).contains(recherche))\r\n                            pSelect.add(produitPreview);\r\n                    } else {\r\n                        switch (choix) {\r\n                            case 1 -> {\r\n                                short pCat = Short.parseShort(cat[0]);\r\n                                if (choixCat == pCat)\r\n                                    pSelect.add(produitPreview);\r\n                            }\r\n                            case 2 -> {\r\n                                float prix = Float.parseFloat(infos[3]);\r\n                                if (estPrixPlusGrand) {\r\n                                    if (prix <= floatDemande)\r\n                                        pSelect.add(produitPreview);\r\n                                } else {\r\n                                    if (prix >= floatDemande)\r\n                                        pSelect.add(produitPreview);\r\n                                }\r\n                            }\r\n                            case 3 -> {\r\n                                String[] nbLikesS = contenu[4].split(\",\");\r\n                                int nbLikes = nbLikesS.length;\r\n                                if (nbLikesS[0].isEmpty())\r\n                                    nbLikes = 0;\r\n                                if (nbLikes >= nbLikesDemande)\r\n                                    pSelect.add(produitPreview);\r\n                            }\r\n                            case 4 -> {\r\n                                float noteMoyenne = Float.parseFloat(infos[6]);\r\n                                if (noteMoyenne >= floatDemande)\r\n                                    pSelect.add(produitPreview);\r\n                            }\r\n                            case 5 -> {\r\n                                if (Integer.parseInt(infos[5]) != 0)\r\n                                    pSelect.add(produitPreview);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (pSelect.isEmpty()) {\r\n                    System.out.println(\"Aucun résultat pour cette recherche. Veuillez réessayer.\");\r\n                    continue;\r\n                }\r\n                pSelect.add(\"Faire une nouvelle recherche\");\r\n                pSelect.add(\"Retourner au menu principal\");\r\n                while (true) {\r\n                    System.out.println(\"\\nChoisissez un produit: \");\r\n                    choix = selectionChoix(pSelect.toArray());\r\n                    if (choix == pSelect.size() - 1)\r\n                        break;\r\n                    else if (choix == pSelect.size())\r\n                        return;\r\n                    Produit p = initialiserProduit(pSelect.get(choix - 1).split(\",\")[0]);\r\n                    System.out.println(\"\\n\" + p.getFormatDisplay());\r\n                    while (true) {\r\n                        System.out.println(\"\\nQue voulez-vous faire ensuite?\");\r\n                        choix = selectionChoix(new String[]{\"Regarder les évaluations\", \"Voir les likes\",\r\n                                \"Retourner au résultat de la recherche\"});\r\n                        if (choix == 3)\r\n                            break;\r\n                        switch (choix) {\r\n                            case 1 -> System.out.println(\"\\n\" + p.getEvaluationsDisplay());\r\n                            case 2 -> {\r\n                                ArrayList<String> ar = p.voirLikes();\r\n                                String[] as = ar.toArray(new String[0]);\r\n                                if (as.length == 1)\r\n                                    System.out.println(\"\\nCe produit n'a aucun likes.\");\r\n                                else\r\n                                    System.out.println(\"\\nVoici la liste des likes:\\n\" + String.join(\"\\n\", as));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Quelque chose s'est mal passé. Veuillez réessayer.\");\r\n        }\r\n    }\r\n    static void trouverRevendeur() {\r\n        try {\r\n            while (true) {\r\n                System.out.println(\"\\nQuel type de recherche voulez-vous faire?\");\r\n                ArrayList<String> revendeurSelect = new ArrayList<>();\r\n                List<String> revendeurs = fichiersDansDossier(REVENDEURS_PATH);\r\n                String demandeUtilisateur = \"\";\r\n                boolean estRecherche = 1 == selectionChoix(new String[]{\"Recherche par mots-clés\",\r\n                        \"Recherche par filtre\"});\r\n\r\n                if (estRecherche) {\r\n                    System.out.print(\"Entrez votre recherche: \");\r\n                    demandeUtilisateur = br.readLine();\r\n                } else {\r\n                    System.out.println(\"Choisissez votre type de filtre: \");\r\n                    choix = selectionChoix(new String[]{\"Catégorie de produits vendues\", \"Nom\", \"Adresse\"});\r\n                    switch (choix) {\r\n                        case 1 -> {\r\n                            System.out.println(\"Choisissez une catégorie: \");\r\n                            demandeUtilisateur = Categorie.getCat(selectionChoix(Categorie.categories) - 1);\r\n\r\n                        }\r\n                        case 2 -> {\r\n                            System.out.println(\"Choisissez un nom :\");\r\n                            demandeUtilisateur = br.readLine();\r\n\r\n                        }\r\n                        case 3 -> {\r\n                            System.out.print(\"Choisissez une adresse \");\r\n                            demandeUtilisateur = br.readLine();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (String r : revendeurs) {\r\n                    String[] contenu = lireFichierEnEntier(REVENDEURS_PATH + r + \"/\" + INFOS);\r\n                    String adresse = contenu[0].split(\",\")[5];\r\n                    List<String> categories = Arrays.asList(contenu[2].split(\",\"));\r\n\r\n                    if (estRecherche) {\r\n                        if (r.contains(demandeUtilisateur))\r\n                            revendeurSelect.add(r);\r\n                    } else {\r\n                        switch (choix) {\r\n                            case 1 -> {\r\n                                if (categories.contains(demandeUtilisateur))\r\n                                    revendeurSelect.add(r);\r\n                            }\r\n                            case 2 -> {\r\n                                if (r.contains(demandeUtilisateur))\r\n                                    revendeurSelect.add(r);\r\n                            }\r\n                            case 3 -> {\r\n                                if (adresse.contains(demandeUtilisateur))\r\n                                    revendeurSelect.add(r);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (revendeurSelect.isEmpty()) {\r\n                    System.out.println(\"Aucun résultat pour cette recherche. Veuillez réessayer.\");\r\n                    return;\r\n                }\r\n                revendeurSelect.add(\"Faire une nouvelle recherche\");\r\n                revendeurSelect.add(\"Retourner au menu acheteur\");\r\n                while (true) {\r\n                    System.out.println(\"\\nChoisissez un revendeur: \");\r\n                    choix = selectionChoix(revendeurSelect.toArray());\r\n                    if (choix == revendeurSelect.size() - 1)\r\n                        break;\r\n                    else if (choix == revendeurSelect.size())\r\n                        return;\r\n                    Revendeur r = initialiserRevendeur(revendeurSelect.get(choix - 1));\r\n                    System.out.println(\"\\n\" + r.afficherMetriques() + \"\\n\");\r\n\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Quelque chose s'est mal passé. Veuillez réessayer.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/unishop/ControleurInvite.java b/src/main/java/unishop/ControleurInvite.java
--- a/src/main/java/unishop/ControleurInvite.java	
+++ b/src/main/java/unishop/ControleurInvite.java	
@@ -77,7 +77,6 @@
                     choix = selectionChoix(aSelect.toArray());
                     acheteur = initialiserAcheteur(aSelect.get(choix));
                 }
-
             }
 
         } catch (IOException e) {
Index: src/main/java/unishop/Users/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unishop.Users;\r\n\r\nimport unishop.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Stack;\r\nimport java.util.StringJoiner;\r\n\r\npublic abstract class User {\r\n\r\n    protected final String username;\r\n    protected String password;\r\n    protected String email;\r\n    protected long phone;\r\n    protected String address;\r\n    protected final ArrayList<Billet> billets;\r\n    protected final ArrayList<Commande> commandes;\r\n    protected Stack<Notification> notifications;\r\n    protected User(String username, String password, String email, long phone, String address,\r\n                   ArrayList<Billet> billets, ArrayList<Commande> commandes, Stack<Notification> ns) {\r\n        this.username = username;\r\n        this.password = password;\r\n        this.email = email;\r\n        this.phone = phone;\r\n        this.address = address;\r\n        this.billets = new ArrayList<>(billets);\r\n        this.commandes = new ArrayList<>(commandes);\r\n        this.notifications = ns;\r\n\r\n    }\r\n    public abstract void save();\r\n    public abstract boolean isAcheteur();\r\n    public abstract String afficherMetriques();\r\n    public void addBillet(Billet b) {\r\n        this.billets.add(b);\r\n        save();\r\n    }\r\n    public String voirNotifications() {\r\n        if (notifications.isEmpty())\r\n            return \"Vous n'avez aucunes notifications!\";\r\n        StringJoiner sj = new StringJoiner(\"\\n\");\r\n        for (int i = 0; i < notifications.size(); ++i)\r\n            sj.add(notifications.pop().afficher());\r\n        save();\r\n        return sj.toString();\r\n    }\r\n    public ArrayList<Billet> getBillets() {\r\n        return new ArrayList<>(billets);\r\n    }\r\n    public Billet trouverBillet(int id) {\r\n        for (Billet b : billets) {\r\n            if (b.id == id)\r\n                return b;\r\n        }\r\n        return null;\r\n    }\r\n    public Commande trouverCommande(int id) {\r\n        for (Commande c : commandes)\r\n            if (c.getId() == id)\r\n                return c;\r\n        return null;\r\n    }\r\n    public ArrayList<Commande> getCommandes() {\r\n        return new ArrayList<>(commandes);\r\n    }\r\n    public void annulerCommande(Commande c) {\r\n        this.commandes.remove(c);\r\n        save();\r\n    }\r\n    public abstract void ajouterCommande(Commande c);\r\n    public String formatSaveCommande() {\r\n        if (commandes.isEmpty())\r\n            return \"\";\r\n        StringJoiner sj = new StringJoiner(\",\");\r\n        for(Commande c : commandes)\r\n            sj.add(String.valueOf(c.getId()));\r\n        return sj.toString();\r\n    }\r\n    public String formatSaveBillet() {\r\n        if (billets.isEmpty())\r\n            return \"\";\r\n        StringJoiner sj = new StringJoiner(\",\");\r\n        for(Billet b : billets)\r\n            sj.add(String.valueOf(b.id));\r\n        return sj.toString();\r\n    }\r\n    public String formatSaveNotifications() {\r\n        if (notifications.isEmpty())\r\n            return \"\";\r\n        StringJoiner sj = new StringJoiner(\"\\n\");\r\n        for(Notification n : notifications)\r\n            sj.add(n.saveFormat());\r\n        return sj.toString();\r\n    }\r\n\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public String getAddress() {\r\n        return address;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public void setPhone(long phone) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    public void setAddress(String address) {\r\n        this.address = address;\r\n    }\r\n\r\n    public void setPassword (String password) { this.password = password; }\r\n\r\n    public void addNotifications(Notification n) {\r\n        this.notifications.push(n);\r\n        save();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/unishop/Users/User.java b/src/main/java/unishop/Users/User.java
--- a/src/main/java/unishop/Users/User.java	
+++ b/src/main/java/unishop/Users/User.java	
@@ -104,14 +104,17 @@
 
     public void setEmail(String email) {
         this.email = email;
+        save();
     }
 
     public void setPhone(long phone) {
         this.phone = phone;
+        save();
     }
 
     public void setAddress(String address) {
         this.address = address;
+        save();
     }
 
     public void setPassword (String password) { this.password = password; }
