Index: src/main/java/unishop/Users/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unishop.Users;\r\n\r\nimport unishop.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Stack;\r\nimport java.util.StringJoiner;\r\n\r\npublic abstract class User {\r\n\r\n    protected final String username;\r\n    protected String password;\r\n    protected String email;\r\n    protected long phone;\r\n    protected String address;\r\n    protected final ArrayList<Billet> billets;\r\n    protected final ArrayList<Commande> commandes;\r\n    protected Stack<Notification> notifications;\r\n    protected User(String username, String password, String email, long phone, String address,\r\n                   ArrayList<Billet> billets, ArrayList<Commande> commandes, Stack<Notification> ns) {\r\n        this.username = username;\r\n        this.password = password;\r\n        this.email = email;\r\n        this.phone = phone;\r\n        this.address = address;\r\n        this.billets = new ArrayList<>(billets);\r\n        this.commandes = new ArrayList<>(commandes);\r\n        this.notifications = ns;\r\n\r\n    }\r\n    public abstract void save();\r\n    public abstract boolean isAcheteur();\r\n    public abstract String afficherMetriques();\r\n    public void addBillet(Billet b) {\r\n        this.billets.add(b);\r\n        save();\r\n    }\r\n    public String voirNotifications() {\r\n        if (notifications.isEmpty())\r\n            return \"Vous n'avez aucunes notifications!\";\r\n        StringJoiner sj = new StringJoiner(\"\\n\");\r\n        for (int i = 0; i < notifications.size(); ++i)\r\n            sj.add(notifications.pop().afficher());\r\n        save();\r\n        return sj.toString();\r\n    }\r\n    public ArrayList<Billet> getBillets() {\r\n        return new ArrayList<>(billets);\r\n    }\r\n    public Billet trouverBillet(int id) {\r\n        for (Billet b : billets) {\r\n            if (b.id == id)\r\n                return b;\r\n        }\r\n        return null;\r\n    }\r\n    public Commande trouverCommande(int id) {\r\n        for (Commande c : commandes)\r\n            if (c.getId() == id)\r\n                return c;\r\n        return null;\r\n    }\r\n    public ArrayList<Commande> getCommandes() {\r\n        return new ArrayList<>(commandes);\r\n    }\r\n    public void annulerCommande(Commande c) {\r\n        this.commandes.remove(c);\r\n        save();\r\n    }\r\n    public abstract void ajouterCommande(Commande c);\r\n    public String formatSaveCommande() {\r\n        if (commandes.isEmpty())\r\n            return \"\";\r\n        StringJoiner sj = new StringJoiner(\",\");\r\n        for(Commande c : commandes)\r\n            sj.add(String.valueOf(c.getId()));\r\n        return sj.toString();\r\n    }\r\n    public String formatSaveBillet() {\r\n        if (billets.isEmpty())\r\n            return \"\";\r\n        StringJoiner sj = new StringJoiner(\",\");\r\n        for(Billet b : billets)\r\n            sj.add(String.valueOf(b.id));\r\n        return sj.toString();\r\n    }\r\n    public String formatSaveNotifications() {\r\n        if (notifications.isEmpty())\r\n            return \"\";\r\n        StringJoiner sj = new StringJoiner(\"\\n\");\r\n        for(Notification n : notifications)\r\n            sj.add(n.saveFormat());\r\n        return sj.toString();\r\n    }\r\n\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public String getAddress() {\r\n        return address;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public void setPhone(long phone) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    public void setAddress(String address) {\r\n        this.address = address;\r\n    }\r\n    public void addNotifications(Notification n) {\r\n        this.notifications.push(n);\r\n        save();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/unishop/Users/User.java b/src/main/java/unishop/Users/User.java
--- a/src/main/java/unishop/Users/User.java	(revision 5b3dbde7099fd4f3f486af206d507d509b259e7e)
+++ b/src/main/java/unishop/Users/User.java	(date 1703557947054)
@@ -104,14 +104,17 @@
 
     public void setEmail(String email) {
         this.email = email;
+        save();
     }
 
     public void setPhone(long phone) {
         this.phone = phone;
+        save();
     }
 
     public void setAddress(String address) {
         this.address = address;
+        save();
     }
     public void addNotifications(Notification n) {
         this.notifications.push(n);
Index: src/main/java/unishop/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package unishop;\r\n\r\nimport unishop.Users.*;\r\nimport unishop.Categories.*;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.*;\r\n\r\n\r\nimport static unishop.ControleurAcheteur.menuAcheteur;\r\nimport static unishop.ControleurInvite.menuInvite;\r\nimport static unishop.ControleurRevendeur.menuRevendeur;\r\n//import java.util.regex.*;\r\n\r\npublic class Main {\r\n\r\n    public final static String DATABASE_PATH = \"Database/\";\r\n    public final static String PRODUITS_PATH = DATABASE_PATH + \"Produits/\";\r\n    public final static String USERS_PATH = DATABASE_PATH + \"Users/\";\r\n    public final static String ACHETEURS_PATH = USERS_PATH + \"Acheteurs/\";\r\n    public final static String REVENDEURS_PATH = USERS_PATH + \"Revendeurs/\";\r\n    public final static String COMMANDES_PATH = DATABASE_PATH + \"Commandes/\";\r\n    public final static String BILLETS_PATH = DATABASE_PATH + \"Billets/\";\r\n    public final static String CSV = \".csv\";\r\n    public final static String IDS = DATABASE_PATH + \"IDs.csv\";\r\n    public final static String EMAILS = DATABASE_PATH + \"emails.csv\";\r\n    public final static String NOTIFICATIONS = \"Notifications.csv\";\r\n    public final static String PANIER = \"Panier.csv\";\r\n    public final static String INFOS = \"Infos.csv\";\r\n    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n    private static User connectedUser = null;\r\n    private static short choix;\r\n\r\n    public static void main(String[] args) {\r\n        menuPrincipal();\r\n        System.out.println(\"\\nAu plaisir de vous revoir!\");\r\n    }\r\n    static void menuPrincipal(){\r\n        while (true) {\r\n            System.out.println(\"\\nBienvenue sur UniShop!\");\r\n            choix = selectionChoix(new String[]{\"Se connecter\", \"Créer un compte\", \"Continuer en tant qu'invité\",\r\n                    \"Quitter UniShop\"});\r\n            switch (choix) {\r\n                case 1 -> {\r\n                    connectedUser = connecterUser();\r\n                    if (connectedUser == null)\r\n                        continue;\r\n                    System.out.print(\"\\nRebonjour \" + connectedUser.getUsername() + \" ! \");\r\n                    connectedUser.save();\r\n                    if (connectedUser.isAcheteur())\r\n                        menuAcheteur((Acheteur) connectedUser);\r\n                    else\r\n                        menuRevendeur((Revendeur) connectedUser);\r\n                    connectedUser = null;\r\n                }\r\n                case 2 -> creerCompte();\r\n                case 3 -> menuInvite();\r\n                case 4 -> {return;}\r\n            }\r\n        }\r\n    }\r\n\r\n    public static boolean choixOuiNon() {\r\n        System.out.println(\"1. Oui\\n2. Non\");\r\n        try {\r\n            while (true) {\r\n                System.out.print(\"Choisir une option: \");\r\n                String reponseS = br.readLine();\r\n                try {\r\n                    short reponse = Short.parseShort(reponseS);\r\n                    if (reponse == 1 || reponse == 2)\r\n                        return reponse == 1;\r\n                    else\r\n                        System.out.println(\"Choix invalide! Veuillez entrer un choix de 1 à 2\");\r\n                }\r\n                catch(NumberFormatException e){\r\n                    System.out.println(\"Veuillez entrer un chiffre de 1 à 2\");\r\n                }\r\n            }\r\n        }\r\n        catch(IOException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    public static short selectionChoix(Object[] choix) {\r\n        int nbChoix = choix.length;\r\n        for (int i = 0; i < nbChoix; ++i) {\r\n            System.out.println(i + 1 + \". \" + choix[i]);\r\n        }\r\n        try {\r\n            while (true) {\r\n                System.out.print(\"Choisir une option: \");\r\n                String reponseS = br.readLine();\r\n                try {\r\n                    short reponse = Short.parseShort(reponseS);\r\n                    if (reponse < nbChoix + 1 && reponse > 0)\r\n                        return reponse;\r\n                    else\r\n                        System.out.println(\"Choix invalide! Veuillez entrer un choix de 1 à \" + nbChoix);\r\n                }\r\n                catch(NumberFormatException e){\r\n                    System.out.println(\"Veuillez entrer un chiffre de 1 à \" + nbChoix);\r\n                }\r\n            }\r\n        }\r\n        catch(IOException e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    static void creerCompte() {\r\n        System.out.println(\"\\nChoisissez le type de compte à créer:\");\r\n        choix = selectionChoix(new String[]{\"Acheteur\", \"Revendeur\", \"Revenir au menu principal\"});\r\n        if (choix == 3)\r\n            return;\r\n        System.out.println(\"\\nRemplissez le formulaire pour créer un compte:\");\r\n        System.out.print(\"Entrez votre username: \");\r\n        try {\r\n            String username = br.readLine();\r\n            List<String> acheteurs = fichiersDansDossier(ACHETEURS_PATH);\r\n            List<String> revendeurs = fichiersDansDossier(REVENDEURS_PATH);\r\n            while (acheteurs.contains(username) || revendeurs.contains(username)) {\r\n                System.out.print(\"Ce Username existe déjà. Veuillez entrer un autre Username: \");\r\n                username = br.readLine();\r\n            }\r\n            System.out.print(\"Entrez votre mot de passe: \");\r\n            String motDePasse = br.readLine();\r\n            System.out.print(\"Entrez votre courriel: \");\r\n            String courriel = br.readLine();\r\n            ArrayList<String> emails = iniArrayList(lireFichierEnEntier(EMAILS)[0]);\r\n            while (emails.contains(courriel) || courriel.isEmpty()) {\r\n                System.out.print(\"Un compte a déjà été créé avec ce courriel. Veuillez en entrer un autre: \");\r\n                courriel = br.readLine();\r\n            }\r\n            emails.add(courriel);\r\n            ecrireFichierEntier(EMAILS, String.join(\",\", emails));\r\n            System.out.print(\"Entrez votre téléphone: \");\r\n            long telephone = demanderLong(\"un téléphone\");\r\n            System.out.print(\"Entrez votre adresse: \");\r\n            String adresse = br.readLine();\r\n            if (choix == 1) {\r\n                String basePath =  ACHETEURS_PATH + username + \"/\";\r\n                System.out.print(\"Entrez votre nom: \");\r\n                String nom = br.readLine();\r\n                System.out.print(\"Entrez votre prénom: \");\r\n                String prenom = br.readLine();\r\n                if (new File(basePath).mkdir()) {\r\n                    String[] infos = new String[] {motDePasse, courriel, \"\" + telephone , adresse, nom, prenom,\r\n                            \"0,0\", \"\" + obtenirTempsEnSecondes()};\r\n                    ecrireFichierEntier(basePath + INFOS, String.join(\",\", infos) + \"\\n\\n\\n\\n\\n\");\r\n                    ecrireFichierEntier(basePath + PANIER, \"0,0\");\r\n                    System.out.println(\"Inscription du compte acheteur \" + username + \" réussi!\");\r\n                }\r\n                else\r\n                    System.out.println(\"Erreur lors de la création du dossier. Veuillez recommencer\");\r\n\r\n            } else {\r\n                String basePath = REVENDEURS_PATH + username + \"/\";\r\n                if (new File(basePath).mkdir()) {\r\n                    String[] infos = new String[] {motDePasse, courriel, \"\" + telephone , adresse, \"0,0,0, \",\r\n                            \"\" + obtenirTempsEnSecondes() };\r\n                    ecrireFichierEntier(basePath + INFOS, String.join(\",\", infos) + \"\\n\\n\\n\\n\\n\");\r\n                    System.out.println(\"Inscription du compte revendeur \" + username + \" réussi!\");\r\n                }\r\n                else\r\n                    System.out.println(\"Erreur lors de la création du dossier. Veuillez recommencer\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    static User connecterUser() {\r\n        try {\r\n            System.out.println(\"\\nConnection (Ne rien rentrer retourne au menu principal): \");\r\n            String categorie = \"\";\r\n            String username = \"\";\r\n            while (categorie.isEmpty()) {\r\n                System.out.print(\"Entrez votre Username: \");\r\n                username = br.readLine();\r\n                if (username.isEmpty())\r\n                    return null;\r\n                File dossier = new File (ACHETEURS_PATH + username);\r\n                if (dossier.exists()) {\r\n                    categorie = \"Acheteurs/\";\r\n                }\r\n                dossier = new File (REVENDEURS_PATH + username);\r\n                if (dossier.exists()) {\r\n                    categorie = \"Revendeurs/\";\r\n                }\r\n                if (categorie.isEmpty()) {\r\n                    System.out.println(\"Username inconnu. Veuillez réessayer\");\r\n                }\r\n            }\r\n\r\n            String[] data = lireFichierEnEntier(USERS_PATH + categorie + username + \"/\" + INFOS);\r\n            String[] infos = data[0].split(\",\");\r\n            String password = infos[0];\r\n            System.out.print(\"Entrez votre mot de passe: \");\r\n            String passwordEntre = br.readLine();\r\n            if (passwordEntre.isEmpty())\r\n                return null;\r\n            while (!(password.equals(passwordEntre))) {\r\n                System.out.print(\"Mauvais mot de passe! Veuillez recommencer: \");\r\n                passwordEntre = br.readLine();\r\n            }\r\n            if (infos.length == 9) {\r\n                long creationTime = Long.parseLong(infos[8]);\r\n                if (obtenirTempsEnSecondes() - creationTime > 86400) {\r\n                    System.out.println(\"\\nCe compte a été créé il y a plus de 24h et est donc invalide! Veuillez créer\"+\r\n                            \"un nouveau compte!\");\r\n                    effacerFichier(USERS_PATH + categorie + username);\r\n                }\r\n                else\r\n                    System.out.println(\"Votre compte est maintenant activé!\");\r\n            }\r\n            if (categorie.equals(\"Acheteurs/\")){\r\n                return initialiserAcheteur(username);\r\n            }\r\n            else {\r\n                return initialiserRevendeur(username);\r\n            }\r\n        }\r\n        catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    public static Acheteur initialiserAcheteur(String username) throws IOException {\r\n        String path = ACHETEURS_PATH + username + \"/\";\r\n        String[] data = lireFichierEnEntier( path+ INFOS);\r\n        String[] infos = data[0].split(\",\");\r\n        ArrayList<String> as =  iniArrayList(data[1]);\r\n        ArrayList<String> rl =  iniArrayList(data[2]);\r\n        ArrayList<Commande> cmds = new ArrayList<>();\r\n        for (String id : iniArrayList(data[3]))\r\n            cmds.add(initialiserCommande(Integer.parseInt(id)));\r\n        ArrayList<Billet> bis = new ArrayList<>();\r\n        for (String id : iniArrayList(data[4]))\r\n            bis.add(initialiserBillet(Integer.parseInt(id)));\r\n        Stack<Notification> notifs = new Stack<>();\r\n        for (int i = 5; i < data.length; ++i) {\r\n            String[] n = data[i].split(\",\");\r\n            notifs.push(new Notification(Integer.parseInt(n[0]), n[1], n[2], n[3], Integer.parseInt(n[4])));\r\n        }\r\n        String[] dataPanier = lireFichierEnEntier(path + PANIER);\r\n        String[] infosPanier = dataPanier[0].split(\",\");\r\n        float coutT = Float.parseFloat(infosPanier[0]);\r\n        int pts = Integer.parseInt(infosPanier[1]);\r\n        Commande panier = new Commande((short) 0, coutT, pts);\r\n        for (int j = 1; j < dataPanier.length; ++j) {\r\n            Produit p = initialiserProduit(dataPanier[j]);\r\n            panier.addInitial(p);\r\n        }\r\n        return new Acheteur(username, infos[0], infos[1], Long.parseLong(infos[2]),\r\n                infos[3], infos[4], infos[5], Integer.parseInt(infos[6]), Integer.parseInt(infos[7]), as, rl, bis,\r\n                panier, cmds, notifs);\r\n    }\r\n    static Revendeur initialiserRevendeur(String username) throws IOException {\r\n        String path = REVENDEURS_PATH + username + \"/\";\r\n        String[] data = lireFichierEnEntier( path+ INFOS);\r\n        String[] infos = data[0].split(\",\");\r\n        ArrayList<String> followers = iniArrayList(data[1]);\r\n        ArrayList<String> cats = iniArrayList(data[2]);\r\n        ArrayList<Commande> cmds = new ArrayList<>();\r\n        for (String id : iniArrayList(data[3]))\r\n            cmds.add(initialiserCommande(Integer.parseInt(id)));\r\n        ArrayList<Billet> bis = new ArrayList<>();\r\n        for (String id : iniArrayList(data[4]))\r\n            bis.add(initialiserBillet(Integer.parseInt(id)));\r\n        Stack<Notification> notifs = new Stack<>();\r\n        for (int i = 5; i < data.length; ++i) {\r\n            String[] n = data[i].split(\",\");\r\n            notifs.push(new Notification(Integer.parseInt(n[0]), n[1], n[2], n[3], Integer.parseInt(n[4])));\r\n        }\r\n        ArrayList<Produit> ps = new ArrayList<>();\r\n        for(String pc : fichiersDansDossier(PRODUITS_PATH)){\r\n            String r = lireFichierEnEntier(PRODUITS_PATH + pc)[0].split(\",\")[0];\r\n            if (r.equals(username))\r\n                ps.add(initialiserProduit(pc));\r\n        }\r\n        return new Revendeur(username, infos[0], infos[1], Long.parseLong(infos[2]), infos[3],\r\n                Float.parseFloat(infos[4]), Integer.parseInt(infos[5]), followers, bis, ps, cmds, cats, notifs);\r\n    }\r\n    static Produit initialiserProduit(String titreProduit) throws IOException{\r\n        String path = PRODUITS_PATH + titreProduit;\r\n        if (!titreProduit.endsWith(CSV))\r\n            path += CSV;\r\n        String[] s = lireFichierEnEntier(path);\r\n        String[] f = s[0].split(\",\");\r\n        String[] images = s[1].split(\",\");\r\n        String[] videos = s[2].split(\",\");\r\n        String[] cs = s[3].split(\",\");\r\n        Categorie c = null;\r\n        switch (Short.parseShort(cs[0])) {\r\n            case 0 -> c = new CLivres(cs[1], cs[2], cs[3], Long.parseLong(cs[4]), cs[5], Integer.parseInt(cs[6]),\r\n                    Integer.parseInt(cs[7]));\r\n            case 1 -> c = new CRessources(cs[1], cs[2], cs[3], Long.parseLong(cs[4]), cs[5], Integer.parseInt(cs[6]));\r\n            case 2 -> c = new CPapeterie(cs[1], cs[2], cs[3]);\r\n            case 3 -> c = new CInformatique(cs[1], cs[2], cs[3], cs[4]);\r\n            case 4 -> c = new CBureau(cs[1], cs[2], cs[3]);\r\n        }\r\n        ArrayList<String> likes =  iniArrayList(s[4]);\r\n        ArrayList<Evaluation> evals = new ArrayList<>();\r\n        for (int i = 5; i < s.length; ++i) {\r\n            String[] e = s[i].split(\",\");\r\n            ArrayList<String> elikes = new ArrayList<>(Arrays.asList(e).subList(5, e.length));\r\n            evals.add(new Evaluation(e[0], Integer.parseInt(e[1]), e[2], Boolean.parseBoolean(e[4]), elikes)) ;\r\n        }\r\n        return new Produit(f[0], f[1], f[2], Float.parseFloat(f[3]), Integer.parseInt(f[4]), Integer.parseInt(f[5]),\r\n                images, videos, c, likes, evals);\r\n    }\r\n    static Commande initialiserCommande(int id) throws IOException {\r\n        String[] lines = lireFichierEnEntier(COMMANDES_PATH + id + CSV);\r\n        String[] fstLine = lines[0].split(\",\");\r\n        Commande c = new Commande(Short.parseShort(fstLine[2]), Float.parseFloat(fstLine[3]),\r\n                Integer.parseInt(fstLine[4]));\r\n        long rec = 0;\r\n        if (c.estLivre())\r\n            rec = Long.parseLong(fstLine[6]);\r\n        c.addPastInfo(Integer.parseInt(fstLine[0]), fstLine[1], fstLine[5], rec);\r\n        for (int j = 1; j < lines.length; ++j) {\r\n            String[] line = lines[j].split(\",\");\r\n            Produit p = initialiserProduit(line[0]);\r\n            p.setUniqueId(Integer.parseInt(line[1]));\r\n            c.addInitial(p);\r\n        }\r\n        return c;\r\n    }\r\n    static Billet initialiserBillet(int id) throws IOException{\r\n        String[] bs = lireFichierEnEntier(BILLETS_PATH + id + CSV)[0].split(\",\");\r\n        return new Billet(Integer.parseInt(bs[0]), bs[1], bs[2], bs[3], Boolean.parseBoolean(bs[4]),\r\n                Boolean.parseBoolean(bs[5]) , bs[6], bs[7], Boolean.parseBoolean(bs[8]));\r\n    }\r\n    public static int demanderIntPositif(String demande) throws IOException {\r\n        int i;\r\n        while (true) {\r\n            try {\r\n                i = Integer.parseInt(br.readLine());\r\n                if (i >= 0)\r\n                    return i;\r\n                else {\r\n                    System.out.print(\"Veuillez entrer un entier positif: \");\r\n                }\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.out.print(\"Veuillez entrer \" + demande + \" valide: \");\r\n            }\r\n        }\r\n    }\r\n    public static long demanderLong(String demande) throws IOException {\r\n        long l;\r\n        while (true) {\r\n            try {\r\n                l = Long.parseLong(br.readLine());\r\n                return l;\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.out.print(\"Veuillez entrer \" + demande + \" valide: \");\r\n            }\r\n        }\r\n    }\r\n    public static float demanderFloat(String demande) throws IOException {\r\n        float prix;\r\n        while (true) {\r\n            try {\r\n                prix = arrondirPrix(Float.parseFloat(br.readLine()));\r\n                if (prix >= 0)\r\n                    return arrondirPrix(prix);\r\n                else\r\n                    System.out.print(\"Veuillez entrer un chiffre à virgule positif: \");\r\n            }\r\n            catch (NumberFormatException e) {\r\n                System.out.print(\"Veuillez entrer \" + demande + \" valide (Nombre à virgule): \");\r\n            }\r\n        }\r\n    }\r\n\r\n    // TEST\r\n    public static float arrondirPrix(float prix) {\r\n        return Math.round((prix) * 100) / 100f;\r\n    }\r\n    public static long obtenirTempsEnSecondes() {\r\n        return System.currentTimeMillis() / 1000;\r\n    }\r\n    public static String[] lireFichierEnEntier(String path) throws IOException {\r\n        return Files.readAllLines(Paths.get(path), StandardCharsets.UTF_8).toArray(new String[0]);\r\n    }\r\n    public static void ecrireFichierEntier(String path, String toWrite) {\r\n        try {\r\n            BufferedWriter bw = new BufferedWriter(new FileWriter(path));\r\n            bw.write(toWrite);\r\n            bw.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    static List<String> fichiersDansDossier(String path) {\r\n        return Arrays.asList(Objects.requireNonNull(new File(path).list()));\r\n    }\r\n    public static ArrayList<String> iniArrayList(String s) {\r\n        String[] tab = s.split(\",\");\r\n        if (tab[0].isEmpty())\r\n            return new ArrayList<>(Arrays.asList(tab).subList(1, tab.length));\r\n        else\r\n            return new ArrayList<>(Arrays.asList(tab));\r\n\r\n    }\r\n    public static String getConnectedUsername() {\r\n        return connectedUser.getUsername();\r\n    }\r\n    public static void effacerFichier(String path) {\r\n        File file = new File(path);\r\n        File[] contents = file.listFiles();\r\n        if (contents != null) {\r\n            for (File f : contents) {\r\n                effacerFichier(f.getPath());\r\n            }\r\n        }\r\n        if (!file.delete())\r\n            System.out.println(\"Compte pas effacé: \" + file);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/unishop/Main.java b/src/main/java/unishop/Main.java
--- a/src/main/java/unishop/Main.java	(revision 5b3dbde7099fd4f3f486af206d507d509b259e7e)
+++ b/src/main/java/unishop/Main.java	(date 1703557658793)
@@ -13,7 +13,6 @@
 import static unishop.ControleurAcheteur.menuAcheteur;
 import static unishop.ControleurInvite.menuInvite;
 import static unishop.ControleurRevendeur.menuRevendeur;
-//import java.util.regex.*;
 
 public class Main {
 
@@ -27,7 +26,6 @@
     public final static String CSV = ".csv";
     public final static String IDS = DATABASE_PATH + "IDs.csv";
     public final static String EMAILS = DATABASE_PATH + "emails.csv";
-    public final static String NOTIFICATIONS = "Notifications.csv";
     public final static String PANIER = "Panier.csv";
     public final static String INFOS = "Infos.csv";
     public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
